#parse("./templates/common/javaClassHeader.vm")#parse("./templates/common/javaClassVariable.vm")
package ${package.Controller};

import $tempModelPackage.${entity}Response;
import $tempModelPackage.${entity}Request;
#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

#else
#end
import com.lingzhi.retail.dubhe.controller.BaseController;
import com.lingzhi.retail.dubhe.exception.BusinessException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import com.lingzhi.retail.dubhe.dto.RestResult;
import com.lingzhi.retail.dubhe.dto.PagerInfo;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import io.swagger.annotations.ApiResponse;

import ${package.Service}.${table.serviceName};
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;

import java.util.List;
/**
 * $!{table.comment}控制器类
 *
 * @author ${author}
 * @version 1.0.0
 * @date ${date}
 */
@RestController
## #if(${restControllerStyle})
## @RestController
## #else
## @Controller
## #end
@Slf4j
@Api(tags = "${table.controllerName}描述接口用途")
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
@CrossOrigin
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end
    //我是日志
    private static final Logger LOGGER = LoggerFactory.getLogger(${table.controllerName}.class);

    @Autowired
    private ${table.serviceName} ${table.entityPath}Service;

    /**
     * 新增数据
     *
     * @param ${table.entityPath}Request 请求对象
     * @return
     */
    @ApiResponse(code = 200, message = "处理成功")
    @PostMapping("/save")
    RestResult<${entity}Response> save${entity}(${entity}Request ${table.entityPath}Request) throws BusinessException{
        return null;
    }
    /**
    * 修改数据(根据id修改)
    *
    * @param ${table.entityPath}Request 请求对象
    * @return
    */
    @ApiResponse(code = 200, message = "处理成功")
    @PostMapping("/update")
    RestResult update${entity}(${entity}Request ${table.entityPath}Request) throws BusinessException{
        return null;
    }

    /**
    * 根据数据编码查询
    *
    * @param ${tempPropertyName_PK} ${tempComment_PK}
    * @return
    */
    @ApiResponse(code = 200, message = "处理成功")
    @PostMapping("/get")
    RestResult<${entity}Response> get${entity}(${tempPropertyType_PK} ${tempPropertyName_PK}){
        return null;
    }

    /**
    * 逻辑删除数据
    *
    * @param ${tempPropertyName_PK} ${tempComment_PK}
    * @return
    */
    @ApiResponse(code = 200, message = "处理成功")
    @PostMapping("/delete")
    RestResult delete${entity}(${tempPropertyType_PK} ${tempPropertyName_PK}) throws BusinessException{
        return null;
    }

    /**
    * 分页查询
    *
    * @param ${table.entityPath}Request 分页查询请求对象
    * @param pagerInfo 分页查询请求对象
    * @return
    */
    @ApiResponse(code = 200, message = "处理成功")
    @PostMapping("/listPage")
    RestResult<PagerInfo<${entity}Response>> listPage(${entity}Request ${table.entityPath}Request, PagerInfo<${entity}Response> pagerInfo){
        return null;
    }

    /**
    * 列表查询
    *
    * @param ${table.entityPath}Request 请求对象
    * @return
    */
    @ApiResponse(code = 200, message = "处理成功")
    @PostMapping("/list")
    RestResult<List<${entity}Response>> list(${entity}Request ${table.entityPath}Request){
        return null;
    }
}
